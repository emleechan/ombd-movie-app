{"version":3,"sources":["Context/AppContext.js","Components/Movie/Movie.js","Constants/index.js","Services/OmdbApis.js","Components/Searchbar/Searchbar.js","Components/Nomination/Nomination.js","Container/Dashboard/Dashboard.js","App.js","index.js"],"names":["AppContext","createContext","AppContextProvider","props","useState","loading","movies","nominations","JSON","parse","localStorage","getItem","errorMessage","state","setState","Provider","value","children","Movie","movie","useContext","Segment","className","width","src","Poster","Title","Year","find","nomination","imdbID","length","Button","onClick","e","preventDefault","newNomination","setItem","stringify","nominateMovie","disabled","searchMovies","searchValue","fetch","process","API_URL","then","response","json","jsonResponse","catch","error","Searchbar","setSearchValue","search","a","moviesRes","Error","toString","Response","Search","resetInputField","Input","onChange","target","size","type","placeholder","onKeyDown","keyCode","callSearchFunc","icon","Nomination","id","Icon","link","name","filter","deleteNomination","color","Dashboard","Grid","centered","columns","stackable","Row","Column","height","map","index","key","Message","info","header","content","propTypes","PropTypes","object","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2b9f977.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nconst AppContext = createContext([{}, () => {}]);\n\nconst AppContextProvider = (props) => {\n    const [state, setState] = useState({\n        loading: false,\n        movies: [],\n        nominations: JSON.parse(localStorage.getItem(\"localStorage\")) || [],\n        errorMessage: ''\n      });\n\n    return(\n        <AppContext.Provider value={[state, setState]}>\n            {props.children}\n        </AppContext.Provider>\n    );\n}\n\nexport  {AppContext, AppContextProvider}; ","import React, { useContext } from \"react\";\nimport { Segment, Button } from 'semantic-ui-react';\nimport './Movie.css';\nimport { AppContext } from '../../Context/AppContext'\nimport {MAX_NOMINATIONS} from '../../Constants'\n\nconst Movie = ({ movie }) => {\n  const [state, setState] = useContext(AppContext);\n  const { nominations } = state;\n\n  const nominateMovie = (movie) => {\n    const newNomination = [...nominations, movie];\n    setState(state => ({ ...state, nominations: newNomination}));\n    localStorage.setItem(\"localStorage\", JSON.stringify(newNomination));\n  };\n\n  const callNominateFunc = (e) => {\n    e.preventDefault();\n    nominateMovie(movie);\n  }\n\n  return (\n    <Segment className=\"movie\">\n      <div>\n        <img\n            width=\"100\"\n            src={movie.Poster}\n        />\n      </div>\n      <div className='movie-body'> \n        <h2>{movie.Title}</h2>\n        <p>({movie.Year})</p>\n        {!nominations.find(nomination => nomination.imdbID === movie.imdbID) && nominations.length < MAX_NOMINATIONS ?\n            <Button onClick={callNominateFunc} >Nominate</Button> :\n            <Button disabled>Nominate</Button> \n        }\n      </div>\n    </Segment>\n  );\n};\n\nexport default Movie;","export const MAX_NOMINATIONS = 5\n","export const searchMovies = (searchValue) => {\n    return fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=${process.env.API_URL}`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n          return jsonResponse;\n      })\n      .catch((error) => {\n        return error;\n      });\n}\n\n\n","import React, { useState, useContext } from \"react\";\nimport { Input, Button, Icon } from 'semantic-ui-react'\nimport { AppContext } from '../../Context/AppContext'\nimport { searchMovies } from '../../Services/OmdbApis'\n\nimport './Searchbar.css';\n\nconst ENTER_KEYCODE = 13;\n\nconst Searchbar = () => {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [state, setState] = useContext(AppContext);\n  const { movies, loading, nominations, errorMessage } = state;\n  \n  const callSearchFunc = (e) => {\n    e.preventDefault();\n    search(searchValue);\n    resetInputField();\n  }\n\n  const search = async (searchValue) => {\n    setState(state => ({ ...state, loading: true }));\n    const moviesRes =  await searchMovies(searchValue);\n    setState(state => ({ ...state, loading: false }));\n    if(moviesRes instanceof Error){\n      setState(state => ({ ...state, errorMessage: moviesRes.toString()}));\n    }\n    else if (moviesRes.Response === \"True\") {\n        setState(state => ({ ...state, movies: moviesRes.Search}));\n        setState(state => ({ ...state, errorMessage: ''}));\n    } else {\n        setState(state => ({ ...state, errorMessage: moviesRes.Error}));\n    }\n  }\n\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  }\n\n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  const handleEnter = (e) => {\n    if (e.keyCode === ENTER_KEYCODE) {\n      setSearchValue(e.target.value);\n      callSearchFunc(e);\n    }\n  };\n\n  return (\n        <Input\n          className='search'\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          size='huge' \n          type=\"text\"\n          loading={loading}\n          placeholder='Search Movies to Nominate...'\n          onKeyDown={handleEnter}\n          icon='search'\n        />\n    );\n}\n\nexport default Searchbar;","import React, { useContext } from \"react\";\nimport { Button, Icon } from 'semantic-ui-react'\nimport { AppContext } from '../../Context/AppContext'\nimport './Nomination.css';\n\nconst Nomination = ({ movie }) => {\n  const [state, setState] = useContext(AppContext);\n  const { nominations } = state;\n\n  const deleteNomination = (imdbID) => {\n      const newNomination = nominations.filter(movie => movie.imdbID !== imdbID);\n      setState(state => ({ ...state, nominations: newNomination}));\n      localStorage.setItem(\"localStorage\", JSON.stringify(newNomination));\n  };\n\n  const callDeleteFunc = (e) => {\n    e.preventDefault();\n    deleteNomination(movie.imdbID);\n  }\n\n  return (\n    <div className=\"nomination\">\n        <div>\n          <h4 id=\"fonts\" className='nomination-header'>{movie.Title}</h4>\n          <div id=\"fonts\" className='nomination-year'>({movie.Year})</div>\n        </div>\n          <Icon link name='close' onClick={callDeleteFunc} color='grey'/>\n    </div>\n  );\n};\n\nexport default Nomination;","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Movie from \"../../Components/Movie/Movie\";\nimport Searchbar from \"../../Components/Searchbar/Searchbar\";\nimport Nomination from \"../../Components/Nomination/Nomination\";\nimport { Grid, Segment, Message } from 'semantic-ui-react'\nimport {MAX_NOMINATIONS} from '../../Constants'\nimport { AppContext } from '../../Context/AppContext'\nimport './Dashboard.css';\nimport '../../Components/Nomination/Nomination.css';\n\nconst Dashboard = () => {\n    const [state, setState] = useContext(AppContext);\n    const { movies, nominations, errorMessage } = state;\n\n    return (\n        <div className=\"App\">\n            <Grid centered columns={2} stackable >\n                <Grid.Row>\n                    <Grid.Column className=\"nomination-container\" id=\"fonts\" width={4} height={10}>\n                            {nominations.length <= 0 ? (\n                                <div className=\"nomination-title\">No Movies Are Nominated</div>\n                            ) : (\n                                <div>\n                                    <div className=\"nomination-title\"><h4 id='fonts'>Nominees</h4></div>\n                                    {nominations.map((movie, index) => (\n                                        <Nomination key={`${index}-${movie.Title}`} movie={movie} />\n                                    ))}\n                                </div>\n                            )}\n                    </Grid.Column>\n\n                    <Grid.Column width={12}> \n                        <Searchbar/>\n                        {nominations.length >= MAX_NOMINATIONS &&\n                            <Message\n                                info\n                                header='Max nominations have been made'\n                                content=\"Roll out the red carpet!\"\n                            />\n                        }   \n                        <div>\n                            {errorMessage ? (\n                                <div className=\"errorMessage\"><h1 id='fonts'>{errorMessage}</h1></div>\n                            ) : (\n                                movies.map((movie, index) => (\n                                    <Movie key={`${index}-${movie.Title}`} movie={movie} />\n                                ))\n                            )}\n                        </div>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </div>\n    );\n}\nexport default Dashboard;\n\nNomination.propTypes = {\n     movie: PropTypes.object\n}\n\nMovie.propTypes = {\n    movie: PropTypes.object\n}","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport Dashboard from './Container/Dashboard/Dashboard';\nimport { AppContextProvider } from './Context/AppContext';\n\nconst App = () => {\n  return (\n    <div>\n      <AppContextProvider>\n        <Dashboard />\n      </ AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}